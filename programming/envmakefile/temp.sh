#set -x
MK_PATH='VPATH+='
MK_CURDIR='$(PWD)'
MK_INCLUDE_LIB_MK_FILE="include ${MK_CURDIR}\/RELATIVE_MAKE_FILES_PATH\/linux.lib.mk"
MK_INCLUDE_SRC_OPTS_MK_FILE='#MK_INCLUDE_SRC_OPTS_MK_FILE'
MK_ENDIF='endif'
MK_INCLUDE_SUBDIR_MK_FILE="include ${MK_CURDIR}\/RELATIVE_MAKE_FILES_PATH\/linux.subdir.mk"
MK_NOT_EQUAL_OPERATOR=","
MK_IF_NOT_EQ='ifneq ('
MK_IFNOTEQ_BRACKET_END=')'
MK_IF_EQ='ifeq ( '
MK_EXECUTE_SHEL_IF_CMD='$(shell if ['
MK_END_OF_SQ_BRACKET=']'
MK_START_OF_SQ_BRACKET='['
MK_EQUAL_COND='='
MK_SHELL_IF_CMD_END='];then echo true;else echo false;fi ), true)'
MK_INCLUDE_KMOD_MK_FILE="include ${MK_CURDIR}\/RELATIVE_MAKE_FILES_PATH\/linux.kmod.mk"
MK_KERNEL_EXTRA_CFLAGS='EXTRA_CFLAGS'
MK_INCLUDE_PROG_MK_FILE="include ${MK_CURDIR}\/RELATIVE_MAKE_FILES_PATH\/linux.prog.mk"


GENERIC_VARIABLES="MK_PATH MK_CURDIR MK_INCLUDE_LIB_MK_FILE MK_INCLUDE_SRC_OPTS_MK_FILE MK_IF_NOT_EQ MK_ENDIF MK_NOT_EQUAL_OPERATOR MK_INCLUDE_SUBDIR_MK_FILE MK_IF_EQ MK_IFNOTEQ_BRACKET_END MK_EXECUTE_SHEL_IF_CMD MK_END_OF_SQ_BRACKET MK_START_OF_SQ_BRACKET MK_EQUAL_COND MK_SHELL_IF_CMD_END MK_INCLUDE_KMOD_MK_FILE MK_KERNEL_EXTRA_CFLAGS MK_INCLUDE_PROG_MK_FILE MK_IF_DEFINED MK_EOF_IF_DEFINED MK_IF_FILE_EXISTS MK_EOF_IF_FILE_EXISTS"
#GENERIC_VARIABLES="MK_PATH"

SED_PATTERN=''
FLAG=''
for gen_var in $GENERIC_VARIABLES;do
	if [ -z ${FLAG} ];then  
		SED_PATTERN="s/${gen_var}/${!gen_var}/g"
		FLAG='true'
	else
		SED_PATTERN=$SED_PATTERN";s/${gen_var}/${!gen_var}/g"
	fi
done

echo $SED_PATTERN

